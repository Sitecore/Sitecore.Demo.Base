# Build Sitecoredemo Docker images
trigger:
  branches:
    include:
    - develop

resources:
- repo: self

variables:
  GitVersion.PreReleaseLabel: ''
  tag: '$(GitVersion.SemVer)'
  additionalImageTags: ''
  SITECORE_VERSION: '10.0.0'
  NANOSERVER_VERSION: '1809'
  WINDOWSSERVERCORE_VERSION: 'ltsc2019'

stages:
- stage: Build
  displayName: Build images
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: docker
      demands:
        - Agent.OS -equals Windows_NT
    steps:
    - template: version.yml
    - task: DockerCompose@0
      displayName: "Docker Compose Build"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: '$(Build.SourcesDirectory)\docker\docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          WINDOWSSERVERCORE_VERSION=$(WINDOWSSERVERCORE_VERSION)
          NANOSERVER_VERSION=$(NANOSERVER_VERSION)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          BUILD_NUMBER=$(GitVersion.SemVer)
        action: 'Build services'
        arguments: '-m 2G --parallel --pull'
        currentWorkingDirectory: '$(Build.SourcesDirectory)\docker'
    - task: DockerCompose@0
      displayName: "Push Images"
      condition: succeeded()
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: '$(Build.SourcesDirectory)\docker\docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          WINDOWSSERVERCORE_VERSION=$(WINDOWSSERVERCORE_VERSION)
          NANOSERVER_VERSION=$(NANOSERVER_VERSION)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          BUILD_NUMBER=$(GitVersion.SemVer)
        action: 'Push services'
        currentWorkingDirectory: '$(Build.SourcesDirectory)\docker'
- stage: Build_Linux_Images
  displayName: 'Build Linux images'
  dependsOn: []
  jobs:
  - job: Build_Linux_Images
    timeoutInMinutes: 60
    displayName: 'Build Linux Images'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - template: version.yml
    - task: AzureCLI@2
      displayName: 'Download Module Assets'
      inputs:
        azureSubscription: '$(azure.subscription)'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az --version
          az account show
          ./tools/download-wdps.ps1
        workingDirectory: '$(Build.SourcesDirectory)\docker'
    - task: DockerCompose@0
      displayName: "Docker Compose Build"
      condition: succeeded()
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: '$(Build.SourcesDirectory)/docker/docker-compose-linux.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          WINDOWSSERVERCORE_VERSION=$(WINDOWSSERVERCORE_VERSION)
          NANOSERVER_VERSION=$(NANOSERVER_VERSION)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          BUILD_NUMBER=$(GitVersion.SemVer)
        action: 'Build services'
        arguments: '-m 2G --parallel --pull'
        currentWorkingDirectory: '$(Build.SourcesDirectory)\docker'
    - task: DockerCompose@0
      displayName: "Push Images"
      condition: succeeded()
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: '$(Build.SourcesDirectory)/docker/docker-compose-linux.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          WINDOWSSERVERCORE_VERSION=$(WINDOWSSERVERCORE_VERSION)
          NANOSERVER_VERSION=$(NANOSERVER_VERSION)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          BUILD_NUMBER=$(GitVersion.SemVer)
        action: 'Push services'
        currentWorkingDirectory: '$(Build.SourcesDirectory)\docker'

- stage: Trigger_Harbor_Push
  dependsOn:
  - Build
  - Build_Linux_Images
  condition: and(succeeded('Build'), succeeded('Build_Linux_Images'),or( eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  jobs:
    - job: Harbor_Push
      displayName: 'Harbor Push'
      steps:
      - template: version.yml
      - task: TriggerBuild@3
        displayName: "Trigger Harbor Push"
        inputs:
          definitionIsInCurrentTeamProject: true
          buildDefinition: '103'
          queueBuildForUserThatTriggeredBuild: true
          ignoreSslCertificateErrors: false
          useSameSourceVersion: false
          useCustomSourceVersion: false
          useSameBranch: false
          branchToUse: 'master'
          waitForQueuedBuildsToFinish: false
          storeInEnvironmentVariable: false
          buildParameters: 'namespace: demo, groupName: base, tag: $(GitVersion.SemVer)'
          authenticationMethod: 'Personal Access Token'
          password: '$(System.AccessToken)'
          enableBuildInQueueCondition: false
          dependentOnSuccessfulBuildCondition: false
          dependentOnFailedBuildCondition: false
          checkbuildsoncurrentbranch: false
          failTaskIfConditionsAreNotFulfilled: false
